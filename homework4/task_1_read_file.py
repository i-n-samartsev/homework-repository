"""
Write a function that gets file path as an argument.
Read the first line of the file.
If first line is a number return true if number in an interval [1, 3)*
and false otherwise.
In case of any error, a ValueError should be thrown.

Write a test for that function using pytest library.
You should create files required for the testing inside the test run and
remove them after the test run.
(Opposite to previous homeworks when you used files created manually
before the test.)

Definition of done:
 - function is created
 - function is properly formatted
 - function has positive and negative tests
 - tests do a cleanup and remove remove files generated by tests

You will learn:
 - how to test Exceptional cases
 - how to clean up after tests
 - how to check if file exists**
 - how to handle*** and raise**** exceptions in test. Use sample from
 the documentation.

* https://en.wikipedia.org/wiki/Interval_(mathematics)#Terminology
** https://docs.python.org/3/library/os.path.html
*** https://docs.python.org/3/tutorial/errors.html#handling-exceptions
**** https://docs.python.org/3/tutorial/errors.html#raising-exceptions
"""


class MagicNumberError(ValueError):
    """Base exception class for magic number reader"""
    def __init__(self, message='An error occurred while reading magic number'):
        self.message = message

    def __str__(self):
        return f'{self.message}'


class FileIsEmpty(MagicNumberError):
    """Means that file is empty"""
    def __init__(self, message='File is empty'):
        self.message = message


class FileDoesNotExist(MagicNumberError):
    """Means that file does not exist"""

    def __init__(self, message='File does not exist'):
        self.message = message


def read_magic_number(path: str) -> bool:
    """
        If first line is a number return true if number in an interval[1, 3)
        and false otherwise.
    """
    try:
        with open(path) as file:
            for line in file:
                return 1 <= float(line) < 3
            raise FileIsEmpty
    except FileNotFoundError as err:
        raise FileDoesNotExist from err
    except MagicNumberError:
        raise
    except Exception as err:
        raise MagicNumberError(f'error occurred - {err}') from err
